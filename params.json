{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"pineapple is a framework written by joseph werle for MoovAtom that provides an easy and extendable interface for developing restful apis. It was designed with an mvc pattern in mind and the idea that everything can be extended. Its main goal is to be lightweight and take care of the heavy lifting you would need to do when implementing a restful api from scratch.\r\n\r\n# Table of Contents\r\n* [Install](#install)\r\n* [Documentation](https://github.com/jwerle/pineapple/wiki)\r\n* [Examples](#examples)\r\n* [Creating a new application](#creating-a-new-app)\r\n* [Starting a Server](#starting-a-pineapple-server)\r\n* [Starting a Console](#starting-a-pineapple-console)\r\n* [Application Structure](#basic-app-structure)\r\n* [Issues](#issues)\r\n* [Community](#community)\r\n* [License](#copyright-and-license)\r\n\r\n---\r\n[top](#pineapple)\r\n\r\n\r\n## Installation\r\n===\r\n`pineapple` requires global installation for the CLI utilitiy. If you do not plan on using pineapple to manage a pineapple\r\napplication from the command line then using it as a local module is fine.\r\n```sh\r\n$ [sudo] npm install -g pineapple\r\n```\r\n\r\n---\r\n[top](#pineapple)\r\n\r\n\r\n## Creating a new application\r\n===\r\n`pineapple gen <name>`\r\n\r\nCreating a pineapple application can easily be achieved with `pineapple gen`\r\n```sh\r\n$ pineapple gen myapp\r\n[pineapple] => Sweet! I've created a new Pineapple application here => /Users/werle/repos/myapp\r\n```\r\n\r\n---\r\n[top](#pineapple)\r\n\r\n\r\n## Starting a pineapple server\r\n===\r\n`pineapple server`\r\n\r\nStarting a pineapple server of a pineapple application is as simple as executing `pineapple server` from the directory of\r\nthe pineapple application.\r\n\r\n#### shell\r\n```sh\r\n$ pineapple [server|s]\r\nRequiring app module /config/environment\r\nRequiring app module /config/development\r\nRequiring app module /config/application\r\nRequiring app module /config/routes.js\r\nRequiring app module /app/controllers\r\nRequiring app module /app/models\r\n[app] => Found the Paplfile file. => /Users/werle/repos/myapp/Paplfile\r\n[server] => Listening on port 4000\r\n```\r\n\r\n#### node\r\nYou could utilize the pineapple module and create your own server without using a skeleton pineapple application.\r\nThe contents of the `app.js` file below whose only dependency is `pineapple` demonstrates the process\r\nof using pineapple in node with minimal requirements. Consider the following app structure:\r\n```sh\r\n├── app.js\r\n└── node_modules\r\n    └── pineapple (pineapple module)\r\n```\r\nYou could then use pineapple to create a server, bind routes, and listen on a port to start the service.\r\n```js\r\n// it isn't needed to store pineapple in a variable as it is attached\r\n// to the global object during its bootstrap\r\nrequire('pineapple');\r\n\r\n// define an app name \r\nvar appName = \"myService\";\r\n\r\n// server config\r\nvar serverConfig = {\r\n  port   : 4000, \r\n  config : { \r\n    name : appName\r\n  }\r\n};\r\n\r\n// Let pineapple no about your app name\r\npineapple.app.name = appName;\r\n\r\n// we can create a server with minimal configuration\r\npineapple.api.create(serverConfig);\r\n\r\n/**\r\n * In order for your server to work we will need some routes set up.\r\n * That can easily be achieved with pineapple's built in router.\r\n * \r\n * The Router supports basic POST, GET, PUT, and DELETE protocols via\r\n * convenience methods:\r\n *  router.post(uri_path, [controller_path|callback]); // POST\r\n *  router.get(uri_path, [controller_path|callback]); // GET\r\n *  router.put(uri_path, [controller_path|callback]); // PUT\r\n *  router.del(uri_path, [controller_path|callback]); // DELETE\r\n *\r\n * If you need to set a custom method you can call .create() directly:\r\n *  router.create(CUSTOM_METHOD, uri_path, [controller_path|callback]);\r\n **/\r\n// we need to create a router instance\r\nvar router = new pineapple.router.Router();\r\n\r\n// lets get a \"Hello world\" going\r\nrouter.get('/hello', function(request, response){\r\n  // output some sanity\r\n  pineapple.api.logger.success(\"Got the request, emitting response..\");\r\n\r\n  // response with a json response\r\n  response.json(pineapple.server.OK, new pineapple.server.http.JSONResponse(pineapple.server.OK, {\r\n    message  : \"Hello world! I'm a pineapple api server.\"\r\n  }));\r\n\r\n  // Got the request now close the connection\r\n  pineapple.api.logger.warn(\"Closing connection..\");\r\n\r\n  // close the connection\r\n  pineapple.api.close();\r\n\r\n  // warn pineapples departure\r\n  pineapple.logger.warn(\"Exiting pineapple..\");\r\n\r\n  // exit..\r\n  // you never really have to call .exit() directly..\r\n  pineapple.exit();\r\n});\r\n\r\n// we need to bind the routes we just created to the server\r\npineapple.api.bindRoutes(router.routes);\r\n\r\n// once all is said and done, we can finally start the server\r\n// the .listen() method accept a port and a callback for arguments\r\npineapple.api.listen(serverConfig.port, function(){\r\n  // tap into pineapples api logger\r\n  pineapple.api.logger.info(\"Connected! =)\");\r\n});\r\n```\r\nFrom the command line you can then execute the `app.js` file with the `node` executable\r\nwhich will output something like this:\r\n```sh\r\n$ node app.js\r\n[server] => Connected! =)\r\n```\r\nFrom the browser or from a program like [cURL](http://curl.haxx.se/docs/manpage.html) you could hit the following url `http://localhost:4000/hello` while your app is running.\r\n```sh\r\n$ curl http://localhost:4000/hello\r\n{\"code\":200,\"status\":true,\"data\":{\"message\":\"Hello world! I'm a pineapple api server.\"}}\r\n```\r\n\r\n---\r\n[top](#pineapple)\r\n\r\n\r\nStarting a pineapple console\r\n===\r\n```\r\n$ pineapple [console|c]\r\nRequiring app module /config/environment\r\nRequiring app module /config/development\r\nRequiring app module /config/application\r\nRequiring app module /config/routes.js\r\nRequiring app module /app/controllers\r\nRequiring app module /app/models\r\n[app] => Found the Paplfile file. => /Users/werle/repos/myapp/Paplfile\r\n[console] => Starting pineapple console..\r\n[console] => SUCCESS Have fun!\r\nStarting REPLConsole session with name pineapple with locale local\r\npineapple-local> [server] => Listening on port 4000\r\n```\r\n\r\n\r\n---\r\n[top](#pineapple)\r\n\r\n\r\n## Structure\r\n===\r\n```\r\nmyapp/\r\n├── Capfile\r\n├── Jakefile\r\n├── Paplfile\r\n├── Procfile\r\n├── README.md\r\n├── app\r\n│   ├── controllers\r\n│   │   ├── index.js\r\n│   │   └── pineapple\r\n│   │       ├── Api.js\r\n│   │       └── index.js\r\n│   └── models\r\n│       └── index.js\r\n├── config\r\n│   ├── README.md\r\n│   ├── application.json\r\n│   ├── development.json\r\n│   ├── environment.json\r\n│   ├── production.json\r\n│   └── routes.js\r\n├── index.js\r\n├── log\r\n├── package.json\r\n└── test\r\n    └── app\r\n        └── README.md\r\n\r\n8 directories, 18 files\r\n```\r\n\r\n---\r\n[top](#pineapple)\r\n\r\n\r\n## Issues?\r\n===\r\nSubmit all bugs [here](https://github.com/jwerle/pineapple/issues/new)\r\n\r\n---\r\n[top](#pineapple)\r\n\r\n\r\n## Community\r\n===\r\nJoin the google group [here](https://groups.google.com/forum/?hl=en&fromgroups#!forum/pineapplejs)\r\n\r\nIRC? Hang out with us at #papl\r\n\r\n---\r\n[top](#pineapple)\r\n\r\n\r\nCopyright and license\r\n---------------------\r\n\r\nCopyright 2012\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this work except in compliance with the License.\r\nYou may obtain a copy of the License in the LICENSE file, or at:\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n- - -\r\n**pineapple** copyright 2012\r\nwerle.io - joseph@werle.io","name":"Pineapple","tagline":"A very simple, fun, and extendable RESTful API framework that includes routing and a model wrapper around MongoDB. Built for MVC idealists. A framework that just steps out of the way and helps you get your data.","google":""}